{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2","program":"/Users/antonioramos/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","gfx_memory","--edition=2018","/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=bd65a42986365508","-C","extra-filename=-bd65a42986365508","--out-dir","/Users/antonioramos/CS181/tictactoe/target/rls/debug/deps","-L","dependency=/Users/antonioramos/CS181/tictactoe/target/rls/debug/deps","--extern","bit_set=/Users/antonioramos/CS181/tictactoe/target/rls/debug/deps/libbit_set-3966c5e76cbbc711.rmeta","--extern","fxhash=/Users/antonioramos/CS181/tictactoe/target/rls/debug/deps/libfxhash-cab122f38e55ae9a.rmeta","--extern","hal=/Users/antonioramos/CS181/tictactoe/target/rls/debug/deps/libgfx_hal-29aa9f4323e7605b.rmeta","--extern","log=/Users/antonioramos/CS181/tictactoe/target/rls/debug/deps/liblog-3420ea1559b41e8b.rmeta","--extern","slab=/Users/antonioramos/CS181/tictactoe/target/rls/debug/deps/libslab-f674e0cce302ad87.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/antonioramos/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/antonioramos/CS181/tictactoe/target/rls/debug/deps/libgfx_memory-bd65a42986365508.rmeta"},"prelude":{"crate_id":{"name":"gfx_memory","disambiguator":[6300987488840524774,2864923100510134183]},"crate_root":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src","external_crates":[{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[3710194649008989715,14559669089861450418]}},{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[9392975149979234998,17049149762166397483]}},{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[16512841426258775062,11665789721448774207]}},{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[10630307797325716480,16523273723520132349]}},{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[3264716338318844693,12681592148182797578]}},{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[140397795414171834,1910274434865169512]}},{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[5557669672741662647,10322216614238315513]}},{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14339503364484872598,13531520383629478599]}},{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[14161909693946419124,17554770295131960960]}},{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[9716880057120631437,4575334529379688610]}},{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[17190292700912465587,13293574150729131089]}},{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[16973425767318922457,5762286362994384933]}},{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[3049460603833016674,5895625007283919048]}},{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[8971705811930800565,4802059752817986136]}},{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[7414259369911982492,16117941559470048194]}},{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","num":16,"id":{"name":"gfx_hal","disambiguator":[5953115990823336795,6314969920521700168]}},{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","num":17,"id":{"name":"bitflags","disambiguator":[622889312128496731,14058552020937752200]}},{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","num":18,"id":{"name":"raw_window_handle","disambiguator":[3967827822235630183,15863857987543660822]}},{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","num":19,"id":{"name":"libc","disambiguator":[7108443598228372490,3719214740063754336]}},{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","num":20,"id":{"name":"bit_set","disambiguator":[14282188084664475152,4359688986954489941]}},{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","num":21,"id":{"name":"bit_vec","disambiguator":[15280285000337557907,1332350671767550977]}},{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","num":22,"id":{"name":"slab","disambiguator":[10122778492727048975,67471401287543704]}},{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","num":23,"id":{"name":"log","disambiguator":[9296859664827610279,6775837141492413681]}},{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","num":24,"id":{"name":"cfg_if","disambiguator":[4164838008399425541,17156835214731903611]}},{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","num":25,"id":{"name":"fxhash","disambiguator":[6910660990117678751,17367875895123839480]}},{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","num":26,"id":{"name":"byteorder","disambiguator":[2470126068869369270,3118906432055358660]}}],"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/lib.rs","byte_start":0,"byte_end":1900,"line_start":1,"line_end":76,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/lib.rs","byte_start":340,"byte_end":341,"line_start":22,"line_end":22,"column_start":16,"column_end":17},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":222},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/lib.rs","byte_start":354,"byte_end":359,"line_start":23,"line_end":23,"column_start":12,"column_end":17},"alias_span":null,"name":"Block","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":575},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/lib.rs","byte_start":373,"byte_end":378,"line_start":24,"line_end":24,"column_start":13,"column_end":18},"alias_span":null,"name":"Heaps","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":560},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/lib.rs","byte_start":380,"byte_end":390,"line_start":24,"line_end":24,"column_start":20,"column_end":30},"alias_span":null,"name":"HeapsError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":582},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/lib.rs","byte_start":392,"byte_end":403,"line_start":24,"line_end":24,"column_start":32,"column_end":43},"alias_span":null,"name":"MemoryBlock","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":612},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/lib.rs","byte_start":420,"byte_end":431,"line_start":25,"line_end":25,"column_start":15,"column_end":26},"alias_span":null,"name":"MappedRange","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":599},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/lib.rs","byte_start":433,"byte_end":439,"line_start":25,"line_end":25,"column_start":28,"column_end":34},"alias_span":null,"name":"Writer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":623},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/lib.rs","byte_start":454,"byte_end":460,"line_start":26,"line_end":26,"column_start":13,"column_end":19},"alias_span":null,"name":"Memory","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/lib.rs","byte_start":473,"byte_end":474,"line_start":27,"line_end":27,"column_start":12,"column_end":13},"alias_span":null,"name":"*","value":"MemoryUtilization","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":664},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/lib.rs","byte_start":487,"byte_end":498,"line_start":28,"line_end":28,"column_start":12,"column_end":23},"alias_span":null,"name":"MemoryUsage","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/lib.rs","byte_start":0,"byte_end":1900,"line_start":1,"line_end":76,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":219},{"krate":0,"index":229},{"krate":0,"index":312},{"krate":0,"index":350},{"krate":0,"index":362},{"krate":0,"index":370},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396}],"decl_id":null,"docs":" GPU memory management","sig":null,"attributes":[{"value":"/ GPU memory management","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/lib.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/lib.rs","byte_start":26,"byte_end":29,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"warn(missing_docs, trivial_casts, trivial_numeric_casts,\n       unused_extern_crates, unused_import_braces, unused_qualifications)","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/lib.rs","byte_start":31,"byte_end":184,"line_start":4,"line_end":11,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":397},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","byte_start":4629,"byte_end":4643,"line_start":13,"line_end":13,"column_start":12,"column_end":26},"name":"DedicatedBlock","qualname":"::allocator::dedicated::DedicatedBlock","value":"DedicatedBlock {  }","parent":null,"children":[{"krate":0,"index":399},{"krate":0,"index":400}],"decl_id":null,"docs":" Memory block allocated from `DedicatedAllocator`.\n","sig":null,"attributes":[{"value":"/ Memory block allocated from `DedicatedAllocator`.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","byte_start":4547,"byte_end":4600,"line_start":11,"line_end":11,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","byte_start":4923,"byte_end":4936,"line_start":24,"line_end":24,"column_start":12,"column_end":25},"name":"unwrap_memory","qualname":"<DedicatedBlock<B>>::unwrap_memory","value":"pub fn unwrap_memory(Self) -> Memory<B>","parent":null,"children":[],"decl_id":null,"docs":" Get inner memory.\n Panics if mapped.\n","sig":null,"attributes":[{"value":"/ Get inner memory.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","byte_start":4864,"byte_end":4885,"line_start":22,"line_end":22,"column_start":5,"column_end":26}},{"value":"/ Panics if mapped.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","byte_start":4890,"byte_end":4911,"line_start":23,"line_end":23,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","byte_start":5067,"byte_end":5078,"line_start":30,"line_end":30,"column_start":12,"column_end":23},"name":"from_memory","qualname":"<DedicatedBlock<B>>::from_memory","value":"pub fn from_memory(Memory<B>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Make a non-mappable block.\n","sig":null,"attributes":[{"value":"/ Make a non-mappable block.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","byte_start":5025,"byte_end":5055,"line_start":29,"line_end":29,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","byte_start":5206,"byte_end":5210,"line_start":35,"line_end":35,"column_start":12,"column_end":16},"name":"size","qualname":"<DedicatedBlock<B>>::size","value":"pub fn size(&Self) -> Size","parent":null,"children":[],"decl_id":null,"docs":" Get the size of the block.\n","sig":null,"attributes":[{"value":"/ Get the size of the block.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","byte_start":5164,"byte_end":5194,"line_start":34,"line_end":34,"column_start":5,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":404},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","byte_start":6985,"byte_end":7003,"line_start":94,"line_end":94,"column_start":12,"column_end":30},"name":"DedicatedAllocator","qualname":"::allocator::dedicated::DedicatedAllocator","value":"DedicatedAllocator {  }","parent":null,"children":[{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408}],"decl_id":null,"docs":" Dedicated memory allocator that uses memory object per allocation requested.","sig":null,"attributes":[{"value":"/ Dedicated memory allocator that uses memory object per allocation requested.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","byte_start":6600,"byte_end":6680,"line_start":85,"line_end":85,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","byte_start":6681,"byte_end":6684,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ This allocator suites best huge allocations.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","byte_start":6685,"byte_end":6733,"line_start":87,"line_end":87,"column_start":1,"column_end":49}},{"value":"/ From 32 MiB when GPU has 4-8 GiB memory total.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","byte_start":6734,"byte_end":6784,"line_start":88,"line_end":88,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","byte_start":6785,"byte_end":6788,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ `Heaps` use this allocator when none of sub-allocators bound to the memory type","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","byte_start":6789,"byte_end":6872,"line_start":90,"line_end":90,"column_start":1,"column_end":84}},{"value":"/ can handle size required.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","byte_start":6873,"byte_end":6902,"line_start":91,"line_end":91,"column_start":1,"column_end":30}},{"value":"/ TODO: Check if resource prefers dedicated memory.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","byte_start":6903,"byte_end":6956,"line_start":92,"line_end":92,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","byte_start":7293,"byte_end":7296,"line_start":104,"line_end":104,"column_start":12,"column_end":15},"name":"new","qualname":"<DedicatedAllocator>::new","value":"pub fn new(hal::MemoryTypeId, hal::memory::Properties, Size) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new `DedicatedAllocator`\n for `memory_type` with `memory_properties` specified\n","sig":null,"attributes":[{"value":"/ Create new `DedicatedAllocator`","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","byte_start":7185,"byte_end":7220,"line_start":102,"line_end":102,"column_start":5,"column_end":40}},{"value":"/ for `memory_type` with `memory_properties` specified","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","byte_start":7225,"byte_end":7281,"line_start":103,"line_end":103,"column_start":5,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":411},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":9736,"byte_end":9748,"line_start":30,"line_end":30,"column_start":12,"column_end":24},"name":"GeneralBlock","qualname":"::allocator::general::GeneralBlock","value":"GeneralBlock {  }","parent":null,"children":[{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418}],"decl_id":null,"docs":" Memory block allocated from `GeneralAllocator`.\n","sig":null,"attributes":[{"value":"/ Memory block allocated from `GeneralAllocator`.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":9656,"byte_end":9707,"line_start":28,"line_end":28,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":10095,"byte_end":10099,"line_start":44,"line_end":44,"column_start":12,"column_end":16},"name":"size","qualname":"<GeneralBlock<B>>::size","value":"pub fn size(&Self) -> Size","parent":null,"children":[],"decl_id":null,"docs":" Get the size of this block.\n","sig":null,"attributes":[{"value":"/ Get the size of this block.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":10052,"byte_end":10083,"line_start":43,"line_end":43,"column_start":5,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":422},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":11481,"byte_end":11494,"line_start":92,"line_end":92,"column_start":12,"column_end":25},"name":"GeneralConfig","qualname":"::allocator::general::GeneralConfig","value":"GeneralConfig { block_size_granularity, max_chunk_size, min_device_allocation }","parent":null,"children":[{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425}],"decl_id":null,"docs":" Config for `GeneralAllocator`.\n","sig":null,"attributes":[{"value":"/ Config for `GeneralAllocator`.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":11405,"byte_end":11439,"line_start":90,"line_end":90,"column_start":1,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":423},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":11568,"byte_end":11590,"line_start":94,"line_end":94,"column_start":9,"column_end":31},"name":"block_size_granularity","qualname":"::allocator::general::GeneralConfig::block_size_granularity","value":"u64","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" All requests are rounded up to multiple of this value.\n","sig":null,"attributes":[{"value":"/ All requests are rounded up to multiple of this value.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":11501,"byte_end":11559,"line_start":93,"line_end":93,"column_start":5,"column_end":63}}]},{"kind":"Field","id":{"krate":0,"index":424},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":11727,"byte_end":11741,"line_start":98,"line_end":98,"column_start":9,"column_end":23},"name":"max_chunk_size","qualname":"::allocator::general::GeneralConfig::max_chunk_size","value":"u64","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" Maximum chunk of blocks size.\n Actual chunk size is `min(max_chunk_size, block_size * blocks_per_chunk)`\n","sig":null,"attributes":[{"value":"/ Maximum chunk of blocks size.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":11603,"byte_end":11636,"line_start":96,"line_end":96,"column_start":5,"column_end":38}},{"value":"/ Actual chunk size is `min(max_chunk_size, block_size * blocks_per_chunk)`","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":11641,"byte_end":11718,"line_start":97,"line_end":97,"column_start":5,"column_end":82}}]},{"kind":"Field","id":{"krate":0,"index":425},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":11801,"byte_end":11822,"line_start":101,"line_end":101,"column_start":9,"column_end":30},"name":"min_device_allocation","qualname":"::allocator::general::GeneralConfig::min_device_allocation","value":"u64","parent":{"krate":0,"index":422},"children":[],"decl_id":null,"docs":" Minimum size of device allocation.\n","sig":null,"attributes":[{"value":"/ Minimum size of device allocation.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":11754,"byte_end":11792,"line_start":100,"line_end":100,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":431},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":11978,"byte_end":11994,"line_start":108,"line_end":108,"column_start":12,"column_end":28},"name":"GeneralAllocator","qualname":"::allocator::general::GeneralAllocator","value":"GeneralAllocator {  }","parent":null,"children":[{"krate":0,"index":433},{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440}],"decl_id":null,"docs":" No-fragmentation allocator.\n Suitable for any type of small allocations.\n Every freed block can be reused.\n","sig":null,"attributes":[{"value":"/ No-fragmentation allocator.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":11833,"byte_end":11864,"line_start":104,"line_end":104,"column_start":1,"column_end":32}},{"value":"/ Suitable for any type of small allocations.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":11865,"byte_end":11912,"line_start":105,"line_end":105,"column_start":1,"column_end":48}},{"value":"/ Every freed block can be reused.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":11913,"byte_end":11949,"line_start":106,"line_end":106,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":13988,"byte_end":13991,"line_start":180,"line_end":180,"column_start":12,"column_end":15},"name":"new","qualname":"<GeneralAllocator<B>>::new","value":"pub fn new(hal::MemoryTypeId, hal::memory::Properties, GeneralConfig, Size)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new `GeneralAllocator`\n for `memory_type` with `memory_properties` specified,\n with `GeneralConfig` provided.\n","sig":null,"attributes":[{"value":"/ Create new `GeneralAllocator`","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":13842,"byte_end":13875,"line_start":177,"line_end":177,"column_start":5,"column_end":38}},{"value":"/ for `memory_type` with `memory_properties` specified,","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":13880,"byte_end":13937,"line_start":178,"line_end":178,"column_start":5,"column_end":62}},{"value":"/ with `GeneralConfig` provided.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":13942,"byte_end":13976,"line_start":179,"line_end":179,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":15865,"byte_end":15883,"line_start":235,"line_end":235,"column_start":12,"column_end":30},"name":"max_sub_block_size","qualname":"<GeneralAllocator<B>>::max_sub_block_size","value":"pub fn max_sub_block_size(&Self) -> Size","parent":null,"children":[],"decl_id":null,"docs":" Maximum block size to allocate within a chunk that is another block.\n","sig":null,"attributes":[{"value":"/ Maximum block size to allocate within a chunk that is another block.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":15781,"byte_end":15853,"line_start":234,"line_end":234,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":26221,"byte_end":26226,"line_start":527,"line_end":527,"column_start":12,"column_end":17},"name":"clear","qualname":"<GeneralAllocator<B>>::clear","value":"pub fn clear(&mut Self, &B::Device) -> Size","parent":null,"children":[],"decl_id":null,"docs":" Free the contents of the allocator.\n","sig":null,"attributes":[{"value":"/ Free the contents of the allocator.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":26170,"byte_end":26209,"line_start":526,"line_end":526,"column_start":5,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":469},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":32350,"byte_end":32361,"line_start":15,"line_end":15,"column_start":12,"column_end":23},"name":"LinearBlock","qualname":"::allocator::linear::LinearBlock","value":"LinearBlock {  }","parent":null,"children":[{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474}],"decl_id":null,"docs":" Memory block allocated from `LinearAllocator`.\n","sig":null,"attributes":[{"value":"/ Memory block allocated from `LinearAllocator`.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":32271,"byte_end":32321,"line_start":13,"line_end":13,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":32672,"byte_end":32676,"line_start":27,"line_end":27,"column_start":12,"column_end":16},"name":"size","qualname":"<LinearBlock<B>>::size","value":"pub fn size(&Self) -> Size","parent":null,"children":[],"decl_id":null,"docs":" Get the size of this block.\n","sig":null,"attributes":[{"value":"/ Get the size of this block.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":32629,"byte_end":32660,"line_start":26,"line_end":26,"column_start":5,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":478},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":34236,"byte_end":34248,"line_start":78,"line_end":78,"column_start":12,"column_end":24},"name":"LinearConfig","qualname":"::allocator::linear::LinearConfig","value":"LinearConfig { line_size }","parent":null,"children":[{"krate":0,"index":479}],"decl_id":null,"docs":" Config for [`LinearAllocator`].\n Refer to documentation on [`LinearAllocator`] to better understand what the configuration options mean.\n","sig":null,"attributes":[{"value":"/ Config for [`LinearAllocator`].","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":34051,"byte_end":34086,"line_start":75,"line_end":75,"column_start":1,"column_end":36}},{"value":"/ Refer to documentation on [`LinearAllocator`] to better understand what the configuration options mean.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":34087,"byte_end":34194,"line_start":76,"line_end":76,"column_start":1,"column_end":108}}]},{"kind":"Field","id":{"krate":0,"index":479},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":34414,"byte_end":34423,"line_start":81,"line_end":81,"column_start":9,"column_end":18},"name":"line_size","qualname":"::allocator::linear::LinearConfig::line_size","value":"u64","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":" Size in bytes of each `Line`.\n If you try to create an allocation larger then this your allocation will fall back to the general allocator.\n","sig":null,"attributes":[{"value":"/ Size in bytes of each `Line`.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":34255,"byte_end":34288,"line_start":79,"line_end":79,"column_start":5,"column_end":38}},{"value":"/ If you try to create an allocation larger then this your allocation will fall back to the general allocator.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":34293,"byte_end":34405,"line_start":80,"line_end":80,"column_start":5,"column_end":117}}]},{"kind":"Struct","id":{"krate":0,"index":485},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":35242,"byte_end":35257,"line_start":96,"line_end":96,"column_start":12,"column_end":27},"name":"LinearAllocator","qualname":"::allocator::linear::LinearAllocator","value":"LinearAllocator {  }","parent":null,"children":[{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493}],"decl_id":null,"docs":" The `LinearAllocator` is best suited for short-lived allocations.\n The allocation strategy has minimal overhead and the implementation is fast.\n But holding a single block will completely stop memory recycling.","sig":null,"attributes":[{"value":"/ The `LinearAllocator` is best suited for short-lived allocations.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":34434,"byte_end":34503,"line_start":84,"line_end":84,"column_start":1,"column_end":70}},{"value":"/ The allocation strategy has minimal overhead and the implementation is fast.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":34504,"byte_end":34584,"line_start":85,"line_end":85,"column_start":1,"column_end":81}},{"value":"/ But holding a single block will completely stop memory recycling.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":34585,"byte_end":34654,"line_start":86,"line_end":86,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":34655,"byte_end":34658,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ The linear allocator will internally create multiple lines.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":34659,"byte_end":34722,"line_start":88,"line_end":88,"column_start":1,"column_end":64}},{"value":"/ Each line is a `gfx_hal::Backend::Memory` from which multiple [`LinearBlock`]s are linearly allocated.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":34723,"byte_end":34829,"line_start":89,"line_end":89,"column_start":1,"column_end":107}},{"value":"/","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":34830,"byte_end":34833,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ A new line is created if there is insufficient space to create a [`LinearBlock`] from the current line.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":34834,"byte_end":34941,"line_start":91,"line_end":91,"column_start":1,"column_end":108}},{"value":"/ New lines are created from scratch or taken from a pool of previously used lines.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":34942,"byte_end":35027,"line_start":92,"line_end":92,"column_start":1,"column_end":86}},{"value":"/ When lines have no allocated [`LinearBlock`]s remaining they are moved to a pool to be reused.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":35028,"byte_end":35126,"line_start":93,"line_end":93,"column_start":1,"column_end":99}},{"value":"/ This pool of unused lines is freed only when [`LinearAllocator::clear`] is called.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":35127,"byte_end":35213,"line_start":94,"line_end":94,"column_start":1,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":36882,"byte_end":36885,"line_start":146,"line_end":146,"column_start":12,"column_end":15},"name":"new","qualname":"<LinearAllocator<B>>::new","value":"pub fn new(hal::MemoryTypeId, hal::memory::Properties, LinearConfig, Size)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new `LinearAllocator`\n for `memory_type` with `memory_properties` specified,\n with `config`.\n","sig":null,"attributes":[{"value":"/ Create new `LinearAllocator`","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":36753,"byte_end":36785,"line_start":143,"line_end":143,"column_start":5,"column_end":37}},{"value":"/ for `memory_type` with `memory_properties` specified,","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":36790,"byte_end":36847,"line_start":144,"line_end":144,"column_start":5,"column_end":62}},{"value":"/ with `config`.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":36852,"byte_end":36870,"line_start":145,"line_end":145,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":37915,"byte_end":37929,"line_start":178,"line_end":178,"column_start":12,"column_end":26},"name":"max_allocation","qualname":"<LinearAllocator<B>>::max_allocation","value":"pub fn max_allocation(&Self) -> Size","parent":null,"children":[],"decl_id":null,"docs":" Maximum allocation size.\n","sig":null,"attributes":[{"value":"/ Maximum allocation size.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":37875,"byte_end":37903,"line_start":177,"line_end":177,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":38777,"byte_end":38782,"line_start":206,"line_end":206,"column_start":12,"column_end":17},"name":"clear","qualname":"<LinearAllocator<B>>::clear","value":"pub fn clear(&mut Self, &B::Device) -> Size","parent":null,"children":[],"decl_id":null,"docs":" Perform full cleanup of the allocated memory.\n","sig":null,"attributes":[{"value":"/ Perform full cleanup of the allocated memory.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":38716,"byte_end":38765,"line_start":205,"line_end":205,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":507},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/mod.rs","byte_start":2448,"byte_end":2457,"line_start":19,"line_end":19,"column_start":5,"column_end":14},"name":"Dedicated","qualname":"::allocator::Kind::Dedicated","value":"Kind::Dedicated","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":" Memory object per allocation.\n","sig":null,"attributes":[{"value":"/ Memory object per allocation.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/mod.rs","byte_start":2410,"byte_end":2443,"line_start":18,"line_end":18,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":509},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/mod.rs","byte_start":2499,"byte_end":2506,"line_start":22,"line_end":22,"column_start":5,"column_end":12},"name":"General","qualname":"::allocator::Kind::General","value":"Kind::General","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":" General purpose allocator.\n","sig":null,"attributes":[{"value":"/ General purpose allocator.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/mod.rs","byte_start":2464,"byte_end":2494,"line_start":21,"line_end":21,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":511},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/mod.rs","byte_start":2619,"byte_end":2625,"line_start":27,"line_end":27,"column_start":5,"column_end":11},"name":"Linear","qualname":"::allocator::Kind::Linear","value":"Kind::Linear","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":" Allocates linearly.\n Fast and low overhead.\n Suitable for one-time-use allocations.\n","sig":null,"attributes":[{"value":"/ Allocates linearly.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/mod.rs","byte_start":2513,"byte_end":2536,"line_start":24,"line_end":24,"column_start":5,"column_end":28}},{"value":"/ Fast and low overhead.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/mod.rs","byte_start":2541,"byte_end":2567,"line_start":25,"line_end":25,"column_start":5,"column_end":31}},{"value":"/ Suitable for one-time-use allocations.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/mod.rs","byte_start":2572,"byte_end":2614,"line_start":26,"line_end":26,"column_start":5,"column_end":47}}]},{"kind":"Enum","id":{"krate":0,"index":506},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/mod.rs","byte_start":2399,"byte_end":2403,"line_start":17,"line_end":17,"column_start":10,"column_end":14},"name":"Kind","qualname":"::allocator::Kind","value":"pub enum Kind {\n\n    /// Memory object per allocation.\n    Dedicated,\n\n    /// General purpose allocator.\n    General,\n\n    /// Allocates linearly.\n    /// Fast and low overhead.\n    /// Suitable for one-time-use allocations.\n    Linear,\n}","parent":null,"children":[{"krate":0,"index":507},{"krate":0,"index":509},{"krate":0,"index":511}],"decl_id":null,"docs":" Allocator kind.\n","sig":null,"attributes":[{"value":"/ Allocator kind.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/mod.rs","byte_start":2308,"byte_end":2327,"line_start":15,"line_end":15,"column_start":1,"column_end":20}}]},{"kind":"Trait","id":{"krate":0,"index":210},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/mod.rs","byte_start":2696,"byte_end":2705,"line_start":31,"line_end":31,"column_start":11,"column_end":20},"name":"Allocator","qualname":"::allocator::Allocator","value":"Allocator<B: hal::Backend>","parent":null,"children":[{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215}],"decl_id":null,"docs":" Allocator trait implemented for various allocators.\n","sig":null,"attributes":[{"value":"/ Allocator trait implemented for various allocators.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/mod.rs","byte_start":2630,"byte_end":2685,"line_start":30,"line_end":30,"column_start":1,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":212},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/mod.rs","byte_start":2776,"byte_end":2781,"line_start":33,"line_end":33,"column_start":10,"column_end":15},"name":"Block","qualname":"::allocator::Allocator::Block","value":"type Block: Block<B>;","parent":{"krate":0,"index":210},"children":[],"decl_id":null,"docs":" Block type returned by allocator.\n","sig":null,"attributes":[{"value":"/ Block type returned by allocator.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/mod.rs","byte_start":2729,"byte_end":2766,"line_start":32,"line_end":32,"column_start":5,"column_end":42}}]},{"kind":"Const","id":{"krate":0,"index":213},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/mod.rs","byte_start":2828,"byte_end":2832,"line_start":36,"line_end":36,"column_start":11,"column_end":15},"name":"KIND","qualname":"::allocator::Allocator::KIND","value":"Kind","parent":{"krate":0,"index":210},"children":[],"decl_id":null,"docs":" Allocator kind.\n","sig":null,"attributes":[{"value":"/ Allocator kind.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/mod.rs","byte_start":2798,"byte_end":2817,"line_start":35,"line_end":35,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/mod.rs","byte_start":2968,"byte_end":2973,"line_start":40,"line_end":40,"column_start":8,"column_end":13},"name":"alloc","qualname":"::allocator::Allocator::alloc","value":"pub fn alloc(&mut Self, &B::Device, Size, Size)\n-> Result<(Self::Block, Size), hal::device::AllocationError>","parent":{"krate":0,"index":210},"children":[],"decl_id":null,"docs":" Allocate block of memory.\n On success returns allocated block and amount of memory consumed from device.\n","sig":null,"attributes":[{"value":"/ Allocate block of memory.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/mod.rs","byte_start":2845,"byte_end":2874,"line_start":38,"line_end":38,"column_start":5,"column_end":34}},{"value":"/ On success returns allocated block and amount of memory consumed from device.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/mod.rs","byte_start":2879,"byte_end":2960,"line_start":39,"line_end":39,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/mod.rs","byte_start":3226,"byte_end":3230,"line_start":49,"line_end":49,"column_start":8,"column_end":12},"name":"free","qualname":"::allocator::Allocator::free","value":"pub fn free(&mut Self, &B::Device, Self::Block) -> Size","parent":{"krate":0,"index":210},"children":[],"decl_id":null,"docs":" Free block of memory.\n Returns amount of memory returned to the device.\n","sig":null,"attributes":[{"value":"/ Free block of memory.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/mod.rs","byte_start":3136,"byte_end":3161,"line_start":47,"line_end":47,"column_start":5,"column_end":30}},{"value":"/ Returns amount of memory returned to the device.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/mod.rs","byte_start":3166,"byte_end":3218,"line_start":48,"line_end":48,"column_start":5,"column_end":57}}]},{"kind":"Trait","id":{"krate":0,"index":222},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/block.rs","byte_start":42777,"byte_end":42782,"line_start":8,"line_end":8,"column_start":11,"column_end":16},"name":"Block","qualname":"::block::Block","value":"Block<B: hal::Backend>","parent":null,"children":[{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227}],"decl_id":null,"docs":" Block that owns a `Segment` of the `Memory`.\n Implementor must ensure that there can't be any other blocks\n with overlapping range (either through type system or safety notes for unsafe functions).\n Provides access to safe memory range mapping.\n","sig":null,"attributes":[{"value":"/ Block that owns a `Segment` of the `Memory`.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/block.rs","byte_start":42509,"byte_end":42557,"line_start":4,"line_end":4,"column_start":1,"column_end":49}},{"value":"/ Implementor must ensure that there can't be any other blocks","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/block.rs","byte_start":42558,"byte_end":42622,"line_start":5,"line_end":5,"column_start":1,"column_end":65}},{"value":"/ with overlapping range (either through type system or safety notes for unsafe functions).","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/block.rs","byte_start":42623,"byte_end":42716,"line_start":6,"line_end":6,"column_start":1,"column_end":94}},{"value":"/ Provides access to safe memory range mapping.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/block.rs","byte_start":42717,"byte_end":42766,"line_start":7,"line_end":7,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/block.rs","byte_start":42853,"byte_end":42863,"line_start":10,"line_end":10,"column_start":8,"column_end":18},"name":"properties","qualname":"::block::Block::properties","value":"pub fn properties(&Self) -> m::Properties","parent":{"krate":0,"index":222},"children":[],"decl_id":null,"docs":" Get memory properties of the block.\n","sig":null,"attributes":[{"value":"/ Get memory properties of the block.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/block.rs","byte_start":42806,"byte_end":42845,"line_start":9,"line_end":9,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/block.rs","byte_start":42928,"byte_end":42934,"line_start":13,"line_end":13,"column_start":8,"column_end":14},"name":"memory","qualname":"::block::Block::memory","value":"pub fn memory(&Self) -> &B::Memory","parent":{"krate":0,"index":222},"children":[],"decl_id":null,"docs":" Get raw memory object.\n","sig":null,"attributes":[{"value":"/ Get raw memory object.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/block.rs","byte_start":42894,"byte_end":42920,"line_start":12,"line_end":12,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/block.rs","byte_start":43013,"byte_end":43020,"line_start":16,"line_end":16,"column_start":8,"column_end":15},"name":"segment","qualname":"::block::Block::segment","value":"pub fn segment(&Self) -> m::Segment","parent":{"krate":0,"index":222},"children":[],"decl_id":null,"docs":" Get memory segment owned by this block.\n","sig":null,"attributes":[{"value":"/ Get memory segment owned by this block.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/block.rs","byte_start":42962,"byte_end":43005,"line_start":15,"line_end":15,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/block.rs","byte_start":43181,"byte_end":43184,"line_start":20,"line_end":20,"column_start":8,"column_end":11},"name":"map","qualname":"::block::Block::map","value":"pub fn map<'a>(&'a mut Self, &B::Device, m::Segment)\n-> Result<MappedRange, hal::device::MapError>","parent":{"krate":0,"index":222},"children":[],"decl_id":null,"docs":" Get mapping for the block segment.\n Memory writes to the region performed by device become available for the host.\n","sig":null,"attributes":[{"value":"/ Get mapping for the block segment.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/block.rs","byte_start":43048,"byte_end":43086,"line_start":18,"line_end":18,"column_start":5,"column_end":43}},{"value":"/ Memory writes to the region performed by device become available for the host.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/block.rs","byte_start":43091,"byte_end":43173,"line_start":19,"line_end":19,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":561},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":43710,"byte_end":43725,"line_start":17,"line_end":17,"column_start":5,"column_end":20},"name":"AllocationError","qualname":"::heaps::HeapsError::AllocationError","value":"HeapsError::AllocationError(hal::device::AllocationError)","parent":{"krate":0,"index":560},"children":[],"decl_id":null,"docs":" Memory allocation failure.\n","sig":null,"attributes":[{"value":"/ Memory allocation failure.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":43675,"byte_end":43705,"line_start":16,"line_end":16,"column_start":5,"column_end":35}}]},{"kind":"StructVariant","id":{"krate":0,"index":564},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":43825,"byte_end":43841,"line_start":19,"line_end":19,"column_start":5,"column_end":21},"name":"NoSuitableMemory","qualname":"::heaps::HeapsError::NoSuitableMemory","value":"HeapsError::NoSuitableMemory { mask, properties }","parent":{"krate":0,"index":560},"children":[],"decl_id":null,"docs":" No memory types among required for resource were found.\n","sig":null,"attributes":[{"value":"/ No memory types among required for resource were found.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":43761,"byte_end":43820,"line_start":18,"line_end":18,"column_start":5,"column_end":64}}]},{"kind":"Enum","id":{"krate":0,"index":560},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":43658,"byte_end":43668,"line_start":15,"line_end":15,"column_start":10,"column_end":20},"name":"HeapsError","qualname":"::heaps::HeapsError","value":"pub enum HeapsError {\n\n    /// Memory allocation failure.\n    AllocationError(hal::device::AllocationError),\n\n    /// No memory types among required for resource were found.\n    NoSuitableMemory {\n        /// Mask of the allowed memory types.\n        mask: u32,\n        /// Requested properties.\n        properties: hal::memory::Properties,\n    },\n}","parent":null,"children":[{"krate":0,"index":561},{"krate":0,"index":564}],"decl_id":null,"docs":" Possible errors returned by `Heaps`.\n","sig":null,"attributes":[{"value":"/ Possible errors returned by `Heaps`.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":43573,"byte_end":43613,"line_start":13,"line_end":13,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":575},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":45117,"byte_end":45122,"line_start":62,"line_end":62,"column_start":12,"column_end":17},"name":"Heaps","qualname":"::heaps::Heaps","value":"Heaps {  }","parent":null,"children":[{"krate":0,"index":577},{"krate":0,"index":578}],"decl_id":null,"docs":" Heaps available on particular physical device.\n","sig":null,"attributes":[{"value":"/ Heaps available on particular physical device.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":45038,"byte_end":45088,"line_start":60,"line_end":60,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":45383,"byte_end":45386,"line_start":72,"line_end":72,"column_start":19,"column_end":22},"name":"new","qualname":"<Heaps<B>>::new","value":"pub unsafe fn new(&hal::adapter::MemoryProperties, GeneralConfig,\n                  LinearConfig, Size) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Initialize the new `Heaps` object.","sig":null,"attributes":[{"value":"/ Initialize the new `Heaps` object.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":45241,"byte_end":45279,"line_start":68,"line_end":68,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":45284,"byte_end":45287,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":45292,"byte_end":45304,"line_start":70,"line_end":70,"column_start":5,"column_end":17}},{"value":"/ All later operations assume the device is not lost.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":45309,"byte_end":45364,"line_start":71,"line_end":71,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":46489,"byte_end":46497,"line_start":104,"line_end":104,"column_start":12,"column_end":20},"name":"allocate","qualname":"<Heaps<B>>::allocate","value":"pub fn allocate(&mut Self, &B::Device, &hal::memory::Requirements,\n                MemoryUsage, Kind) -> Result<MemoryBlock<B>, HeapsError>","parent":null,"children":[],"decl_id":null,"docs":" Allocate memory block give the `requirements` from gfx-hal.\n for intended `usage`, using the `kind` of allocator.\n","sig":null,"attributes":[{"value":"/ Allocate memory block give the `requirements` from gfx-hal.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":46353,"byte_end":46416,"line_start":102,"line_end":102,"column_start":5,"column_end":68}},{"value":"/ for intended `usage`, using the `kind` of allocator.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":46421,"byte_end":46477,"line_start":103,"line_end":103,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":49652,"byte_end":49656,"line_start":201,"line_end":201,"column_start":12,"column_end":16},"name":"free","qualname":"<Heaps<B>>::free","value":"pub fn free(&mut Self, &B::Device, MemoryBlock<B>)","parent":null,"children":[],"decl_id":null,"docs":" Free memory block.","sig":null,"attributes":[{"value":"/ Free memory block.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":49555,"byte_end":49577,"line_start":198,"line_end":198,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":49582,"byte_end":49585,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ Memory block must be allocated from this heap.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":49590,"byte_end":49640,"line_start":200,"line_end":200,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":50439,"byte_end":50444,"line_start":222,"line_end":222,"column_start":12,"column_end":17},"name":"clear","qualname":"<Heaps<B>>::clear","value":"pub fn clear(&mut Self, &B::Device)","parent":null,"children":[],"decl_id":null,"docs":" Clear allocators.\n Call this before dropping an instance of [`Heaps`]\n or if you are low on memory.","sig":null,"attributes":[{"value":"/ Clear allocators.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":50179,"byte_end":50200,"line_start":216,"line_end":216,"column_start":5,"column_end":26}},{"value":"/ Call this before dropping an instance of [`Heaps`]","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":50205,"byte_end":50259,"line_start":217,"line_end":217,"column_start":5,"column_end":59}},{"value":"/ or if you are low on memory.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":50264,"byte_end":50296,"line_start":218,"line_end":218,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":50301,"byte_end":50304,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ Internally calls the clear methods on all","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":50309,"byte_end":50354,"line_start":220,"line_end":220,"column_start":5,"column_end":50}},{"value":"/ internal [`LinearAllocator`] and [`GeneralAllocator`] instances.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":50359,"byte_end":50427,"line_start":221,"line_end":221,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":50754,"byte_end":50765,"line_start":231,"line_end":231,"column_start":12,"column_end":23},"name":"utilization","qualname":"<Heaps<B>>::utilization","value":"pub fn utilization(&Self) -> TotalMemoryUtilization","parent":null,"children":[],"decl_id":null,"docs":" Get memory utilization.\n","sig":null,"attributes":[{"value":"/ Get memory utilization.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":50715,"byte_end":50742,"line_start":230,"line_end":230,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":582},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":51528,"byte_end":51539,"line_start":255,"line_end":255,"column_start":12,"column_end":23},"name":"MemoryBlock","qualname":"::heaps::MemoryBlock","value":"MemoryBlock {  }","parent":null,"children":[{"krate":0,"index":584},{"krate":0,"index":585}],"decl_id":null,"docs":" Memory block allocated from `Heaps`.\n","sig":null,"attributes":[{"value":"/ Memory block allocated from `Heaps`.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":51459,"byte_end":51499,"line_start":253,"line_end":253,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":51691,"byte_end":51702,"line_start":262,"line_end":262,"column_start":12,"column_end":23},"name":"memory_type","qualname":"<MemoryBlock<B>>::memory_type","value":"pub fn memory_type(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Get memory type id.\n","sig":null,"attributes":[{"value":"/ Get memory type id.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":51656,"byte_end":51679,"line_start":261,"line_end":261,"column_start":5,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":599},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":58538,"byte_end":58544,"line_start":17,"line_end":17,"column_start":12,"column_end":18},"name":"Writer","qualname":"::mapping::Writer","value":"Writer { slice }","parent":null,"children":[{"krate":0,"index":604},{"krate":0,"index":605}],"decl_id":null,"docs":" Wrapper structure for a mutable slice with deferred\n flushing for non-coherent memory.\n","sig":null,"attributes":[{"value":"/ Wrapper structure for a mutable slice with deferred","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":58416,"byte_end":58471,"line_start":14,"line_end":14,"column_start":1,"column_end":56}},{"value":"/ flushing for non-coherent memory.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":58472,"byte_end":58509,"line_start":15,"line_end":15,"column_start":1,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":604},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":58601,"byte_end":58606,"line_start":19,"line_end":19,"column_start":9,"column_end":14},"name":"slice","qualname":"::mapping::Writer::slice","value":"&'a mut [T]","parent":{"krate":0,"index":599},"children":[],"decl_id":null,"docs":" Wrapped slice.\n","sig":null,"attributes":[{"value":"/ Wrapped slice.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":58574,"byte_end":58592,"line_start":18,"line_end":18,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":58891,"byte_end":58897,"line_start":28,"line_end":28,"column_start":12,"column_end":18},"name":"forget","qualname":"<Writer>::forget","value":"pub fn forget(Self) -> (*mut T, Option<hal::memory::Segment>)","parent":null,"children":[],"decl_id":null,"docs":" Dispose of the wrapper and return a bare mapping pointer.","sig":null,"attributes":[{"value":"/ Dispose of the wrapper and return a bare mapping pointer.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":58704,"byte_end":58765,"line_start":24,"line_end":24,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":58770,"byte_end":58773,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ The segment to flush is returned. The user is responsible","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":58778,"byte_end":58839,"line_start":26,"line_end":26,"column_start":5,"column_end":66}},{"value":"/ to flush this segment manually.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":58844,"byte_end":58879,"line_start":27,"line_end":27,"column_start":5,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":612},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":59559,"byte_end":59570,"line_start":51,"line_end":51,"column_start":12,"column_end":23},"name":"MappedRange","qualname":"::mapping::MappedRange","value":"MappedRange {  }","parent":null,"children":[{"krate":0,"index":615},{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":618}],"decl_id":null,"docs":" Represents range of the memory mapped to the host.\n Provides methods for safer host access to the memory.\n","sig":null,"attributes":[{"value":"/ Represents range of the memory mapped to the host.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":59418,"byte_end":59472,"line_start":48,"line_end":48,"column_start":1,"column_end":55}},{"value":"/ Provides methods for safer host access to the memory.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":59473,"byte_end":59530,"line_start":49,"line_end":49,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":61697,"byte_end":61700,"line_start":117,"line_end":117,"column_start":12,"column_end":15},"name":"ptr","qualname":"<MappedRange>::ptr","value":"pub fn ptr(&Self) -> NonNull<u8>","parent":null,"children":[],"decl_id":null,"docs":" Get pointer to beginning of memory region.\n i.e. to `range().start` offset from memory origin.\n","sig":null,"attributes":[{"value":"/ Get pointer to beginning of memory region.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":61580,"byte_end":61626,"line_start":115,"line_end":115,"column_start":5,"column_end":51}},{"value":"/ i.e. to `range().start` offset from memory origin.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":61631,"byte_end":61685,"line_start":116,"line_end":116,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":61932,"byte_end":61937,"line_start":123,"line_end":123,"column_start":12,"column_end":17},"name":"range","qualname":"<MappedRange>::range","value":"pub fn range(&Self) -> Range<Size>","parent":null,"children":[],"decl_id":null,"docs":" Get mapped range.\n","sig":null,"attributes":[{"value":"/ Get mapped range.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":61899,"byte_end":61920,"line_start":122,"line_end":122,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":62071,"byte_end":62082,"line_start":128,"line_end":128,"column_start":12,"column_end":23},"name":"is_coherent","qualname":"<MappedRange>::is_coherent","value":"pub fn is_coherent(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if the mapped memory is coherent.\n","sig":null,"attributes":[{"value":"/ Return true if the mapped memory is coherent.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":62010,"byte_end":62059,"line_start":127,"line_end":127,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":62500,"byte_end":62504,"line_start":139,"line_end":139,"column_start":19,"column_end":23},"name":"read","qualname":"<MappedRange>::read","value":"pub unsafe fn read<'b, T>(&'b mut Self, &B::Device, hal::memory::Segment)\n-> Result<&'b [T], hal::device::MapError> where 'a:'b, T: Copy","parent":null,"children":[],"decl_id":null,"docs":" Fetch readable slice of sub-range to be read.\n Invalidating range if memory is not coherent.","sig":null,"attributes":[{"value":"/ Fetch readable slice of sub-range to be read.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":62164,"byte_end":62213,"line_start":132,"line_end":132,"column_start":5,"column_end":54}},{"value":"/ Invalidating range if memory is not coherent.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":62218,"byte_end":62267,"line_start":133,"line_end":133,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":62272,"byte_end":62275,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":62280,"byte_end":62292,"line_start":135,"line_end":135,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":62297,"byte_end":62300,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ * Caller must ensure that device won't write to the memory region until the borrowing ends.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":62305,"byte_end":62400,"line_start":137,"line_end":137,"column_start":5,"column_end":100}},{"value":"/ * `T` Must be plain-old-data type compatible with data in mapped region.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":62405,"byte_end":62481,"line_start":138,"line_end":138,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":63761,"byte_end":63766,"line_start":175,"line_end":175,"column_start":19,"column_end":24},"name":"write","qualname":"<MappedRange>::write","value":"pub unsafe fn write<'b,\n                    T: 'b>(&'b mut Self, &'b B::Device, hal::memory::Segment)\n-> Result<Writer, hal::device::MapError> where 'a:'b, T: Copy","parent":null,"children":[],"decl_id":null,"docs":" Fetch writer to the sub-region.\n This writer will flush data on drop if written at least once.","sig":null,"attributes":[{"value":"/ Fetch writer to the sub-region.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":63516,"byte_end":63551,"line_start":169,"line_end":169,"column_start":5,"column_end":40}},{"value":"/ This writer will flush data on drop if written at least once.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":63556,"byte_end":63621,"line_start":170,"line_end":170,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":63626,"byte_end":63629,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":63634,"byte_end":63646,"line_start":172,"line_end":172,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":63651,"byte_end":63654,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ * Caller must ensure that device won't write to or read from the memory region.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":63659,"byte_end":63742,"line_start":174,"line_end":174,"column_start":5,"column_end":88}}]},{"kind":"Struct","id":{"krate":0,"index":623},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/memory.rs","byte_start":64960,"byte_end":64966,"line_start":6,"line_end":6,"column_start":12,"column_end":18},"name":"Memory","qualname":"::memory::Memory","value":"Memory {  }","parent":null,"children":[{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":628}],"decl_id":null,"docs":" Memory object wrapper.\n Contains size and properties of the memory.\n","sig":null,"attributes":[{"value":"/ Memory object wrapper.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/memory.rs","byte_start":64857,"byte_end":64883,"line_start":3,"line_end":3,"column_start":1,"column_end":27}},{"value":"/ Contains size and properties of the memory.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/memory.rs","byte_start":64884,"byte_end":64931,"line_start":4,"line_end":4,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":356},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/memory.rs","byte_start":65199,"byte_end":65209,"line_start":15,"line_end":15,"column_start":12,"column_end":22},"name":"properties","qualname":"<Memory<B>>::properties","value":"pub fn properties(&Self) -> hal::memory::Properties","parent":null,"children":[],"decl_id":null,"docs":" Get memory properties.\n","sig":null,"attributes":[{"value":"/ Get memory properties.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/memory.rs","byte_start":65161,"byte_end":65187,"line_start":14,"line_end":14,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":357},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/memory.rs","byte_start":65313,"byte_end":65317,"line_start":20,"line_end":20,"column_start":12,"column_end":16},"name":"size","qualname":"<Memory<B>>::size","value":"pub fn size(&Self) -> Size","parent":null,"children":[],"decl_id":null,"docs":" Get memory size.\n","sig":null,"attributes":[{"value":"/ Get memory size.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/memory.rs","byte_start":65281,"byte_end":65301,"line_start":19,"line_end":19,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":358},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/memory.rs","byte_start":65395,"byte_end":65398,"line_start":25,"line_end":25,"column_start":12,"column_end":15},"name":"raw","qualname":"<Memory<B>>::raw","value":"pub fn raw(&Self) -> &B::Memory","parent":null,"children":[],"decl_id":null,"docs":" Get raw memory.\n","sig":null,"attributes":[{"value":"/ Get raw memory.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/memory.rs","byte_start":65364,"byte_end":65383,"line_start":24,"line_end":24,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":359},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/memory.rs","byte_start":65485,"byte_end":65493,"line_start":30,"line_end":30,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<Memory<B>>::into_raw","value":"pub fn into_raw(Self) -> B::Memory","parent":null,"children":[],"decl_id":null,"docs":" Unwrap raw memory.\n","sig":null,"attributes":[{"value":"/ Unwrap raw memory.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/memory.rs","byte_start":65451,"byte_end":65473,"line_start":29,"line_end":29,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/memory.rs","byte_start":65643,"byte_end":65651,"line_start":39,"line_end":39,"column_start":19,"column_end":27},"name":"from_raw","qualname":"<Memory<B>>::from_raw","value":"pub unsafe fn from_raw(B::Memory, Size, hal::memory::Properties,\n                       Option<AtomSize>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create memory from raw object.","sig":null,"attributes":[{"value":"/ Create memory from raw object.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/memory.rs","byte_start":65543,"byte_end":65577,"line_start":34,"line_end":34,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/memory.rs","byte_start":65582,"byte_end":65585,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/memory.rs","byte_start":65590,"byte_end":65602,"line_start":36,"line_end":36,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/memory.rs","byte_start":65607,"byte_end":65610,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ TODO:","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/memory.rs","byte_start":65615,"byte_end":65624,"line_start":38,"line_end":38,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/memory.rs","byte_start":66231,"byte_end":66242,"line_start":59,"line_end":59,"column_start":12,"column_end":23},"name":"is_mappable","qualname":"<Memory<B>>::is_mappable","value":"pub fn is_mappable(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if this memory is host-visible and can be mapped.\n `Equivalent to `memory.properties().contains(Properties::CPU_VISIBLE)`.\n","sig":null,"attributes":[{"value":"/ Check if this memory is host-visible and can be mapped.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/memory.rs","byte_start":66080,"byte_end":66139,"line_start":57,"line_end":57,"column_start":5,"column_end":64}},{"value":"/ `Equivalent to `memory.properties().contains(Properties::CPU_VISIBLE)`.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/memory.rs","byte_start":66144,"byte_end":66219,"line_start":58,"line_end":58,"column_start":5,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":632},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/stats.rs","byte_start":66471,"byte_end":66488,"line_start":6,"line_end":6,"column_start":12,"column_end":29},"name":"MemoryUtilization","qualname":"::stats::MemoryUtilization","value":"MemoryUtilization { used, effective }","parent":null,"children":[{"krate":0,"index":633},{"krate":0,"index":634}],"decl_id":null,"docs":" Memory utilization stats.\n","sig":null,"attributes":[{"value":"/ Memory utilization stats.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/stats.rs","byte_start":66400,"byte_end":66429,"line_start":4,"line_end":4,"column_start":1,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":633},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/stats.rs","byte_start":66540,"byte_end":66544,"line_start":8,"line_end":8,"column_start":9,"column_end":13},"name":"used","qualname":"::stats::MemoryUtilization::used","value":"u64","parent":{"krate":0,"index":632},"children":[],"decl_id":null,"docs":" Total number of bytes allocated.\n","sig":null,"attributes":[{"value":"/ Total number of bytes allocated.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/stats.rs","byte_start":66495,"byte_end":66531,"line_start":7,"line_end":7,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":634},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/stats.rs","byte_start":66602,"byte_end":66611,"line_start":10,"line_end":10,"column_start":9,"column_end":18},"name":"effective","qualname":"::stats::MemoryUtilization::effective","value":"u64","parent":{"krate":0,"index":632},"children":[],"decl_id":null,"docs":" Effective number bytes allocated.\n","sig":null,"attributes":[{"value":"/ Effective number bytes allocated.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/stats.rs","byte_start":66556,"byte_end":66593,"line_start":9,"line_end":9,"column_start":5,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":640},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/stats.rs","byte_start":66699,"byte_end":66720,"line_start":15,"line_end":15,"column_start":12,"column_end":33},"name":"MemoryHeapUtilization","qualname":"::stats::MemoryHeapUtilization","value":"MemoryHeapUtilization { utilization, size }","parent":null,"children":[{"krate":0,"index":641},{"krate":0,"index":642}],"decl_id":null,"docs":" Memory utilization of one heap.\n","sig":null,"attributes":[{"value":"/ Memory utilization of one heap.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/stats.rs","byte_start":66622,"byte_end":66657,"line_start":13,"line_end":13,"column_start":1,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":641},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/stats.rs","byte_start":66752,"byte_end":66763,"line_start":17,"line_end":17,"column_start":9,"column_end":20},"name":"utilization","qualname":"::stats::MemoryHeapUtilization::utilization","value":"stats::MemoryUtilization","parent":{"krate":0,"index":640},"children":[],"decl_id":null,"docs":" Utilization.\n","sig":null,"attributes":[{"value":"/ Utilization.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/stats.rs","byte_start":66727,"byte_end":66743,"line_start":16,"line_end":16,"column_start":5,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":642},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/stats.rs","byte_start":66819,"byte_end":66823,"line_start":20,"line_end":20,"column_start":9,"column_end":13},"name":"size","qualname":"::stats::MemoryHeapUtilization::size","value":"u64","parent":{"krate":0,"index":640},"children":[],"decl_id":null,"docs":" Memory heap size.\n","sig":null,"attributes":[{"value":"/ Memory heap size.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/stats.rs","byte_start":66789,"byte_end":66810,"line_start":19,"line_end":19,"column_start":5,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":648},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/stats.rs","byte_start":66911,"byte_end":66932,"line_start":25,"line_end":25,"column_start":12,"column_end":33},"name":"MemoryTypeUtilization","qualname":"::stats::MemoryTypeUtilization","value":"MemoryTypeUtilization { utilization, properties, heap_index }","parent":null,"children":[{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":651}],"decl_id":null,"docs":" Memory utilization of one type.\n","sig":null,"attributes":[{"value":"/ Memory utilization of one type.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/stats.rs","byte_start":66834,"byte_end":66869,"line_start":23,"line_end":23,"column_start":1,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":649},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/stats.rs","byte_start":66964,"byte_end":66975,"line_start":27,"line_end":27,"column_start":9,"column_end":20},"name":"utilization","qualname":"::stats::MemoryTypeUtilization::utilization","value":"stats::MemoryUtilization","parent":{"krate":0,"index":648},"children":[],"decl_id":null,"docs":" Utilization.\n","sig":null,"attributes":[{"value":"/ Utilization.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/stats.rs","byte_start":66939,"byte_end":66955,"line_start":26,"line_end":26,"column_start":5,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":650},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/stats.rs","byte_start":67031,"byte_end":67041,"line_start":30,"line_end":30,"column_start":9,"column_end":19},"name":"properties","qualname":"::stats::MemoryTypeUtilization::properties","value":"gfx_hal::memory::Properties","parent":{"krate":0,"index":648},"children":[],"decl_id":null,"docs":" Memory type info.\n","sig":null,"attributes":[{"value":"/ Memory type info.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/stats.rs","byte_start":67001,"byte_end":67022,"line_start":29,"line_end":29,"column_start":5,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":651},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/stats.rs","byte_start":67109,"byte_end":67119,"line_start":33,"line_end":33,"column_start":9,"column_end":19},"name":"heap_index","qualname":"::stats::MemoryTypeUtilization::heap_index","value":"usize","parent":{"krate":0,"index":648},"children":[],"decl_id":null,"docs":" Index of heap this memory type uses.\n","sig":null,"attributes":[{"value":"/ Index of heap this memory type uses.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/stats.rs","byte_start":67060,"byte_end":67100,"line_start":32,"line_end":32,"column_start":5,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":657},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/stats.rs","byte_start":67196,"byte_end":67218,"line_start":38,"line_end":38,"column_start":12,"column_end":34},"name":"TotalMemoryUtilization","qualname":"::stats::TotalMemoryUtilization","value":"TotalMemoryUtilization { types, heaps }","parent":null,"children":[{"krate":0,"index":658},{"krate":0,"index":659}],"decl_id":null,"docs":" Total memory utilization.\n","sig":null,"attributes":[{"value":"/ Total memory utilization.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/stats.rs","byte_start":67131,"byte_end":67160,"line_start":36,"line_end":36,"column_start":1,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":658},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/stats.rs","byte_start":67259,"byte_end":67264,"line_start":40,"line_end":40,"column_start":9,"column_end":14},"name":"types","qualname":"::stats::TotalMemoryUtilization::types","value":"std::vec::Vec<stats::MemoryTypeUtilization>","parent":{"krate":0,"index":657},"children":[],"decl_id":null,"docs":" Utilization by types.\n","sig":null,"attributes":[{"value":"/ Utilization by types.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/stats.rs","byte_start":67225,"byte_end":67250,"line_start":39,"line_end":39,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":659},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/stats.rs","byte_start":67333,"byte_end":67338,"line_start":43,"line_end":43,"column_start":9,"column_end":14},"name":"heaps","qualname":"::stats::TotalMemoryUtilization::heaps","value":"std::vec::Vec<stats::MemoryHeapUtilization>","parent":{"krate":0,"index":657},"children":[],"decl_id":null,"docs":" Utilization by heaps.\n","sig":null,"attributes":[{"value":"/ Utilization by heaps.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/stats.rs","byte_start":67299,"byte_end":67324,"line_start":42,"line_end":42,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":665},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/usage.rs","byte_start":70009,"byte_end":70016,"line_start":12,"line_end":12,"column_start":5,"column_end":12},"name":"Private","qualname":"::usage::MemoryUsage::Private","value":"MemoryUsage::Private","parent":{"krate":0,"index":664},"children":[],"decl_id":null,"docs":" Full speed GPU access.\n Optimal for render targets and persistent resources.\n Avoid memory with host access.\n","sig":null,"attributes":[{"value":"/ Full speed GPU access.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/usage.rs","byte_start":69878,"byte_end":69904,"line_start":9,"line_end":9,"column_start":5,"column_end":31}},{"value":"/ Optimal for render targets and persistent resources.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/usage.rs","byte_start":69909,"byte_end":69965,"line_start":10,"line_end":10,"column_start":5,"column_end":61}},{"value":"/ Avoid memory with host access.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/usage.rs","byte_start":69970,"byte_end":70004,"line_start":11,"line_end":11,"column_start":5,"column_end":39}}]},{"kind":"StructVariant","id":{"krate":0,"index":667},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/usage.rs","byte_start":70219,"byte_end":70226,"line_start":17,"line_end":17,"column_start":5,"column_end":12},"name":"Dynamic","qualname":"::usage::MemoryUsage::Dynamic","value":"MemoryUsage::Dynamic { sparse_updates }","parent":{"krate":0,"index":664},"children":[],"decl_id":null,"docs":" CPU to GPU data flow with update commands.\n Used for dynamic buffer data, typically constant buffers.\n Host access is guaranteed.\n Prefers memory with fast GPU access.\n","sig":null,"attributes":[{"value":"/ CPU to GPU data flow with update commands.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/usage.rs","byte_start":70022,"byte_end":70068,"line_start":13,"line_end":13,"column_start":5,"column_end":51}},{"value":"/ Used for dynamic buffer data, typically constant buffers.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/usage.rs","byte_start":70073,"byte_end":70134,"line_start":14,"line_end":14,"column_start":5,"column_end":66}},{"value":"/ Host access is guaranteed.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/usage.rs","byte_start":70139,"byte_end":70169,"line_start":15,"line_end":15,"column_start":5,"column_end":35}},{"value":"/ Prefers memory with fast GPU access.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/usage.rs","byte_start":70174,"byte_end":70214,"line_start":16,"line_end":16,"column_start":5,"column_end":45}}]},{"kind":"StructVariant","id":{"krate":0,"index":669},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/usage.rs","byte_start":70543,"byte_end":70550,"line_start":25,"line_end":25,"column_start":5,"column_end":12},"name":"Staging","qualname":"::usage::MemoryUsage::Staging","value":"MemoryUsage::Staging { read_back }","parent":{"krate":0,"index":664},"children":[],"decl_id":null,"docs":" CPU to GPU data flow with mapping.\n Used for staging data before copying to the `Data` memory.\n Host access is guaranteed.\n","sig":null,"attributes":[{"value":"/ CPU to GPU data flow with mapping.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/usage.rs","byte_start":70398,"byte_end":70436,"line_start":22,"line_end":22,"column_start":5,"column_end":43}},{"value":"/ Used for staging data before copying to the `Data` memory.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/usage.rs","byte_start":70441,"byte_end":70503,"line_start":23,"line_end":23,"column_start":5,"column_end":67}},{"value":"/ Host access is guaranteed.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/usage.rs","byte_start":70508,"byte_end":70538,"line_start":24,"line_end":24,"column_start":5,"column_end":35}}]},{"kind":"Enum","id":{"krate":0,"index":664},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/usage.rs","byte_start":69860,"byte_end":69871,"line_start":8,"line_end":8,"column_start":10,"column_end":21},"name":"MemoryUsage","qualname":"::usage::MemoryUsage","value":"pub enum MemoryUsage {\n\n    /// Full speed GPU access.\n    /// Optimal for render targets and persistent resources.\n    /// Avoid memory with host access.\n    Private,\n\n    /// CPU to GPU data flow with update commands.\n    /// Used for dynamic buffer data, typically constant buffers.\n    /// Host access is guaranteed.\n    /// Prefers memory with fast GPU access.\n    Dynamic {\n        /// Optimize for multiple disjoint small portions to be updated,\n        /// as opposed to big linear chunks of memory.\n        sparse_updates: bool,\n    },\n\n    /// CPU to GPU data flow with mapping.\n    /// Used for staging data before copying to the `Data` memory.\n    /// Host access is guaranteed.\n    Staging {\n        /// Optimize for reading back from Gpu.\n        read_back: bool,\n    },\n}","parent":null,"children":[{"krate":0,"index":665},{"krate":0,"index":667},{"krate":0,"index":669}],"decl_id":null,"docs":" Scenarios of how resources use memory.\n","sig":null,"attributes":[{"value":"/ Scenarios of how resources use memory.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/usage.rs","byte_start":69767,"byte_end":69809,"line_start":6,"line_end":6,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":373},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/usage.rs","byte_start":70724,"byte_end":70743,"line_start":33,"line_end":33,"column_start":12,"column_end":31},"name":"properties_required","qualname":"<MemoryUsage>::properties_required","value":"pub fn properties_required(Self) -> m::Properties","parent":null,"children":[],"decl_id":null,"docs":" Set of required memory properties for this usage.\n","sig":null,"attributes":[{"value":"/ Set of required memory properties for this usage.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/usage.rs","byte_start":70659,"byte_end":70712,"line_start":32,"line_end":32,"column_start":5,"column_end":58}}]},{"kind":"Type","id":{"krate":0,"index":389},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/lib.rs","byte_start":566,"byte_end":570,"line_start":34,"line_end":34,"column_start":10,"column_end":14},"name":"Size","qualname":"::Size","value":"u64","parent":null,"children":[],"decl_id":null,"docs":" Type for any memory sizes.\n","sig":null,"attributes":[{"value":"/ Type for any memory sizes.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/lib.rs","byte_start":526,"byte_end":556,"line_start":33,"line_end":33,"column_start":1,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":390},"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/lib.rs","byte_start":625,"byte_end":633,"line_start":36,"line_end":36,"column_start":10,"column_end":18},"name":"AtomSize","qualname":"::AtomSize","value":"std::num::NonZeroU64","parent":null,"children":[],"decl_id":null,"docs":" Type for non-coherent atom sizes.\n","sig":null,"attributes":[{"value":"/ Type for non-coherent atom sizes.","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/lib.rs","byte_start":578,"byte_end":615,"line_start":35,"line_end":35,"column_start":1,"column_end":38}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","byte_start":4747,"byte_end":4761,"line_start":18,"line_end":18,"column_start":34,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","byte_start":4801,"byte_end":4815,"line_start":19,"line_end":19,"column_start":34,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","byte_start":4840,"byte_end":4854,"line_start":21,"line_end":21,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","byte_start":5294,"byte_end":5308,"line_start":40,"line_end":40,"column_start":31,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","byte_start":7160,"byte_end":7178,"line_start":101,"line_end":101,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":35}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","byte_start":7805,"byte_end":7823,"line_start":122,"line_end":122,"column_start":35,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","byte_start":9018,"byte_end":9036,"line_start":165,"line_end":165,"column_start":15,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":43}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":9941,"byte_end":9953,"line_start":39,"line_end":39,"column_start":34,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":9993,"byte_end":10005,"line_start":40,"line_end":40,"column_start":34,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":10030,"byte_end":10042,"line_start":42,"line_end":42,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":10198,"byte_end":10210,"line_start":49,"line_end":49,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":12729,"byte_end":12745,"line_start":134,"line_end":134,"column_start":34,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":12785,"byte_end":12801,"line_start":135,"line_end":135,"column_start":34,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":13032,"byte_end":13041,"line_start":146,"line_end":146,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":13204,"byte_end":13213,"line_start":155,"line_end":155,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":93}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":13816,"byte_end":13832,"line_start":176,"line_end":176,"column_start":18,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":26322,"byte_end":26338,"line_start":532,"line_end":532,"column_start":35,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":27348,"byte_end":27364,"line_start":566,"line_end":566,"column_start":27,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":28171,"byte_end":28176,"line_start":597,"line_end":597,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":32521,"byte_end":32532,"line_start":22,"line_end":22,"column_start":34,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":32572,"byte_end":32583,"line_start":23,"line_end":23,"column_start":34,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":32608,"byte_end":32619,"line_start":25,"line_end":25,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":32775,"byte_end":32786,"line_start":32,"line_end":32,"column_start":31,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":35993,"byte_end":35997,"line_start":118,"line_end":118,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":36655,"byte_end":36659,"line_start":139,"line_end":139,"column_start":34,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":36699,"byte_end":36703,"line_start":140,"line_end":140,"column_start":34,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":36728,"byte_end":36743,"line_start":142,"line_end":142,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":39109,"byte_end":39124,"line_start":220,"line_end":220,"column_start":35,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":42272,"byte_end":42287,"line_start":314,"line_end":314,"column_start":27,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/heap.rs","byte_start":53307,"byte_end":53317,"line_start":13,"line_end":13,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/memory_type.rs","byte_start":54630,"byte_end":54641,"line_start":11,"line_end":11,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":251}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/memory_type.rs","byte_start":55178,"byte_end":55188,"line_start":32,"line_end":32,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":44025,"byte_end":44035,"line_start":27,"line_end":27,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":277}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":44460,"byte_end":44470,"line_start":39,"line_end":39,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":279}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":44747,"byte_end":44757,"line_start":48,"line_end":48,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":281}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":44911,"byte_end":44921,"line_start":54,"line_end":54,"column_start":41,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":283}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":45226,"byte_end":45231,"line_start":67,"line_end":67,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":286},{"krate":0,"index":289},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":51038,"byte_end":51043,"line_start":239,"line_end":239,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":301}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":51635,"byte_end":51646,"line_start":260,"line_end":260,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":51789,"byte_end":51800,"line_start":267,"line_end":267,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":58677,"byte_end":58683,"line_start":23,"line_end":23,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":59105,"byte_end":59111,"line_start":36,"line_end":36,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":335}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":59929,"byte_end":59940,"line_start":66,"line_end":66,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/memory.rs","byte_start":65145,"byte_end":65151,"line_start":13,"line_end":13,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/stats.rs","byte_start":67398,"byte_end":67420,"line_start":46,"line_end":46,"column_start":28,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/usage.rs","byte_start":70641,"byte_end":70652,"line_start":31,"line_end":31,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":373},{"krate":0,"index":374}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","byte_start":4747,"byte_end":4761,"line_start":18,"line_end":18,"column_start":34,"column_end":48},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":397},"to":{"krate":2,"index":2045}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","byte_start":4801,"byte_end":4815,"line_start":19,"line_end":19,"column_start":34,"column_end":48},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":397},"to":{"krate":2,"index":2057}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","byte_start":4840,"byte_end":4854,"line_start":21,"line_end":21,"column_start":18,"column_end":32},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":397},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","byte_start":5294,"byte_end":5308,"line_start":40,"line_end":40,"column_start":31,"column_end":45},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":397},"to":{"krate":0,"index":222}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","byte_start":7160,"byte_end":7178,"line_start":101,"line_end":101,"column_start":6,"column_end":24},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":404},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","byte_start":7805,"byte_end":7823,"line_start":122,"line_end":122,"column_start":35,"column_end":53},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":404},"to":{"krate":0,"index":210}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/dedicated.rs","byte_start":9018,"byte_end":9036,"line_start":165,"line_end":165,"column_start":15,"column_end":33},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":404},"to":{"krate":2,"index":2266}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":9941,"byte_end":9953,"line_start":39,"line_end":39,"column_start":34,"column_end":46},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":411},"to":{"krate":2,"index":2045}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":9993,"byte_end":10005,"line_start":40,"line_end":40,"column_start":34,"column_end":46},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":411},"to":{"krate":2,"index":2057}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":10030,"byte_end":10042,"line_start":42,"line_end":42,"column_start":18,"column_end":30},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":411},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":10198,"byte_end":10210,"line_start":49,"line_end":49,"column_start":31,"column_end":43},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":411},"to":{"krate":0,"index":222}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":12729,"byte_end":12745,"line_start":134,"line_end":134,"column_start":34,"column_end":50},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":431},"to":{"krate":2,"index":2045}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":12785,"byte_end":12801,"line_start":135,"line_end":135,"column_start":34,"column_end":50},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":431},"to":{"krate":2,"index":2057}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":13032,"byte_end":13041,"line_start":146,"line_end":146,"column_start":30,"column_end":39},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":444},"to":{"krate":2,"index":2033}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":13204,"byte_end":13213,"line_start":155,"line_end":155,"column_start":18,"column_end":27},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":444},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":13816,"byte_end":13832,"line_start":176,"line_end":176,"column_start":18,"column_end":34},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":431},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":26322,"byte_end":26338,"line_start":532,"line_end":532,"column_start":35,"column_end":51},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":431},"to":{"krate":0,"index":210}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":27348,"byte_end":27364,"line_start":566,"line_end":566,"column_start":27,"column_end":43},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":431},"to":{"krate":2,"index":2266}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/general.rs","byte_start":28171,"byte_end":28176,"line_start":597,"line_end":597,"column_start":18,"column_end":23},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":462},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":32521,"byte_end":32532,"line_start":22,"line_end":22,"column_start":34,"column_end":45},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":469},"to":{"krate":2,"index":2045}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":32572,"byte_end":32583,"line_start":23,"line_end":23,"column_start":34,"column_end":45},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":469},"to":{"krate":2,"index":2057}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":32608,"byte_end":32619,"line_start":25,"line_end":25,"column_start":18,"column_end":29},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":469},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":32775,"byte_end":32786,"line_start":32,"line_end":32,"column_start":31,"column_end":42},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":469},"to":{"krate":0,"index":222}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":35993,"byte_end":35997,"line_start":118,"line_end":118,"column_start":18,"column_end":22},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":497},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":36655,"byte_end":36659,"line_start":139,"line_end":139,"column_start":34,"column_end":38},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":497},"to":{"krate":2,"index":2045}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":36699,"byte_end":36703,"line_start":140,"line_end":140,"column_start":34,"column_end":38},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":497},"to":{"krate":2,"index":2057}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":36728,"byte_end":36743,"line_start":142,"line_end":142,"column_start":18,"column_end":33},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":485},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":39109,"byte_end":39124,"line_start":220,"line_end":220,"column_start":35,"column_end":50},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":485},"to":{"krate":0,"index":210}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/allocator/linear.rs","byte_start":42272,"byte_end":42287,"line_start":314,"line_end":314,"column_start":27,"column_end":42},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":485},"to":{"krate":2,"index":2266}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/heap.rs","byte_start":53307,"byte_end":53317,"line_start":13,"line_end":13,"column_start":6,"column_end":16},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":528},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/memory_type.rs","byte_start":54630,"byte_end":54641,"line_start":11,"line_end":11,"column_start":23,"column_end":34},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":534},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/memory_type.rs","byte_start":55178,"byte_end":55188,"line_start":32,"line_end":32,"column_start":23,"column_end":33},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":548},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":44025,"byte_end":44035,"line_start":27,"line_end":27,"column_start":28,"column_end":38},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":560},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":44460,"byte_end":44470,"line_start":39,"line_end":39,"column_start":28,"column_end":38},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":560},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":44747,"byte_end":44757,"line_start":48,"line_end":48,"column_start":45,"column_end":55},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":560},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":44911,"byte_end":44921,"line_start":54,"line_end":54,"column_start":41,"column_end":51},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":560},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":45226,"byte_end":45231,"line_start":67,"line_end":67,"column_start":23,"column_end":28},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":575},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":51038,"byte_end":51043,"line_start":239,"line_end":239,"column_start":32,"column_end":37},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":575},"to":{"krate":2,"index":2266}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":51635,"byte_end":51646,"line_start":260,"line_end":260,"column_start":23,"column_end":34},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":582},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/heaps/mod.rs","byte_start":51789,"byte_end":51800,"line_start":267,"line_end":267,"column_start":36,"column_end":47},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":582},"to":{"krate":0,"index":222}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":58677,"byte_end":58683,"line_start":23,"line_end":23,"column_start":21,"column_end":27},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":599},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":59105,"byte_end":59111,"line_start":36,"line_end":36,"column_start":38,"column_end":44},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":599},"to":{"krate":2,"index":2266}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/mapping.rs","byte_start":59929,"byte_end":59940,"line_start":66,"line_end":66,"column_start":22,"column_end":33},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":612},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/memory.rs","byte_start":65145,"byte_end":65151,"line_start":13,"line_end":13,"column_start":23,"column_end":29},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":623},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/stats.rs","byte_start":67398,"byte_end":67420,"line_start":46,"line_end":46,"column_start":28,"column_end":50},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":657},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/Users/antonioramos/.cargo/registry/src/github.com-1ecc6299db9ec823/gfx-memory-0.2.2/src/usage.rs","byte_start":70641,"byte_end":70652,"line_start":31,"line_end":31,"column_start":6,"column_end":17},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":664},"to":{"krate":4294967295,"index":4294967295}}]}